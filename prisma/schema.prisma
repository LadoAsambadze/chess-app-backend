generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  firstname  String    @map("first_name")
  lastname   String    @map("last_name")
  email      String    @unique
  password   String?
  role       UserRole  @default(REGULAR)
  method     AuthMethod @default(CREDENTIALS)
  isVerified Boolean   @default(false) @map("is_verified")
  emailVerificationToken String? @map("email_verification_token")
  emailVerificationExpires DateTime? @map("email_verification_expires")
  resetPasswordToken String? @map("reset_password_token")
  resetPasswordTokenExpires DateTime?  @map("reset_password_token_expires")
  isActive   Boolean   @default(true) @map("is_active")
  avatar     String?
  phone      String?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  lastLogin  DateTime? @map("last_login")
  accounts   Account[]
  sessions   Session[]
  
  // Relations to games
  createdGames Game[] @relation("CreatedGames")
  joinedGames  Game[] @relation("JoinedGames")
  wonGames     Game[] @relation("WonGames")

  @@map("users")
}

model Account {
  id                 String   @id @default(uuid())
  type               String
  provider           String
  providerAccountId  String?  @map("provider_account_id")
  refreshToken       String?  @map("refresh_token")
  accessToken        String?  @map("access_token")
  expiresAt          Int?     @map("expires_at")
  tokenType          String?  @map("token_type")
  scope              String?
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  userId             String   @map("user_id")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id         String   @id @default(uuid())
  token      String   @unique
  userId     String   @map("user_id")
  expiresAt  DateTime @map("expires_at")
  isRevoked  Boolean  @default(false) @map("is_revoked")
  deviceId   String?  @map("device_id")
  userAgent  String?  @map("user_agent")
  ipAddress  String?  @map("ip_address")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@index([userId])
}

model LoginAttempt {
  id        String   @id @default(uuid())
  email     String
  ipAddress String   @map("ip_address")
  userAgent String   @map("user_agent")
  success   Boolean
  createdAt DateTime @default(now()) @map("created_at")

  @@map("login_attempts")
}

model Game {
  id               String      @id @default(cuid())
  creatorId        String
  creator          User        @relation("CreatedGames", fields: [creatorId], references: [id])
  opponentId       String?     
  opponent         User?       @relation("JoinedGames", fields: [opponentId], references: [id])
  pendingOpponentId String?     
  winnerId         String?
  winner           User?       @relation("WonGames", fields: [winnerId], references: [id])
  status           GameStatus
  timeControl      Int
  fen              String      @default("start")
  moveHistory      Json        @default("[]")
  isPrivate        Boolean     @default(false)
  password         String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

enum UserRole {
  REGULAR
  ADMIN
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
  BOTH
}

enum TokenType {
  VERIFICATION
  RESET_PASSWORD
  CHANGE_EMAIL
}

enum GameStatus {
  WAITING
  ONGOING
  FINISHED
  DRAW  
}


